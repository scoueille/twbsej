// Override Bootstrap's Sass default variables
//
// Nearly all variables in Bootstrap are written with the `!default` flag.
// This allows you to override the default values of those variables before
// you import Bootstrap's source Sass files.
//
// Overriding the default variable values is the best way to customize your
// CSS without writing _new_ styles. For example, you can either change
// `$body-color` or write more CSS that override's Bootstrap's CSS like so:
// `body { color: red; }`.


//
// Bring in Bootstrap
//

// Toggle global options
//$enable-gradients: true;
//$enable-shadows: true;


// Include functions first
@import "bootstrap/scss/functions";

// Customize some defaults
$grid-breakpoints: (
  xs: 0,
  sm: 576px,
  md: 768px
);

// Required
@import "bootstrap/scss/variables";
@import "bootstrap/scss/variables-dark";
@import "bootstrap/scss/maps";
@import "bootstrap/scss/mixins";
@import "bootstrap/scss/utilities";


@import "bootstrap/scss/root";
@import "bootstrap/scss/reboot";

@import "bootstrap/scss/type";
@import "bootstrap/scss/images";
@import "bootstrap/scss/containers";
@import "bootstrap/scss/grid";
@import "bootstrap/scss/tables";

//@import "bootstrap/scss/forms";
@import "bootstrap/scss/forms/labels";
@import "bootstrap/scss/forms/form-text";
@import "bootstrap/scss/forms/form-control";
@import "bootstrap/scss/forms/form-select";
@import "bootstrap/scss/forms/form-check";
//@import "bootstrap/scss/forms/form-range";
//@import "bootstrap/scss/forms/floating-labels";
@import "bootstrap/scss/forms/input-group";
@import "bootstrap/scss/forms/validation";

@import "bootstrap/scss/buttons";
@import "bootstrap/scss/transitions";
@import "bootstrap/scss/dropdown";
@import "bootstrap/scss/button-group";
@import "bootstrap/scss/nav";
@import "bootstrap/scss/navbar"; // Requires nav
@import "bootstrap/scss/card";
@import "bootstrap/scss/accordion";
@import "bootstrap/scss/breadcrumb";
@import "bootstrap/scss/pagination";
@import "bootstrap/scss/badge";
@import "bootstrap/scss/alert";
@import "bootstrap/scss/progress";
@import "bootstrap/scss/list-group";
@import "bootstrap/scss/close";
@import "bootstrap/scss/toasts";
@import "bootstrap/scss/modal"; // Requires transitions
@import "bootstrap/scss/tooltip";
@import "bootstrap/scss/popover";
@import "bootstrap/scss/carousel";
//@import "bootstrap/scss/spinners";
@import "bootstrap/scss/offcanvas"; // Requires transitions
@import "bootstrap/scss/placeholders";

// Helpers
@import "bootstrap/scss/helpers";

$utilities: map-remove(
    $utilities, 
    "gap", "row-gap", "column-gap"
    "link-opacity", "text-opacity");

$utilities: map-merge(
  $utilities, (
    "rounded": map-merge(
      map-get($utilities, "rounded"),
      ( responsive: true ),
    ),
    "rounded-top": map-merge(
      map-get($utilities, "rounded-top"),
      ( responsive: true ),
    ),
    "rounded-end": map-merge(
      map-get($utilities, "rounded-end"),
      ( responsive: true ),
    ),
    "rounded-bottom": map-merge(
      map-get($utilities, "rounded-bottom"),
      ( responsive: true ),
    ),
    "rounded-start": map-merge(
      map-get($utilities, "rounded-start"),
      ( responsive: true ),
    ),
    
    "position": map-merge(
      map-get($utilities, "position"),
      ( responsive: true ),
    ),
    "top": map-merge(
      map-get($utilities, "top"),
      ( responsive: true ),
    ),
    "bottom": map-merge(
      map-get($utilities, "bottom"),
      ( responsive: true ),
    ),
    "start": map-merge(
      map-get($utilities, "start"),
      ( responsive: true ),
    ),
    "end": map-merge(
      map-get($utilities, "end"),
      ( responsive: true ),
    ),
    "translate-middle": map-merge(
      map-get($utilities, "translate-middle"),
      ( responsive: true ),
    ),
    
    "background-color": map-merge(
      map-get($utilities, "background-color"),
      ( responsive: true ),
    ),
  )
);


// CrÃ©ez des variantes de la classe pour chaque breakpoint
@each $breakpoint in map-keys($grid-breakpoints) {
  $infix: breakpoint-infix($breakpoint, $grid-breakpoints);
  
  @if not ($infix == "") {  
    .fade#{$infix} {
      @include media-breakpoint-up($breakpoint) {
        @include transition($transition-fade);

        &:not(.show) {
          opacity: 0;
        }

      }
    }
    
    .tab-content#{$infix} {
      @include media-breakpoint-up($breakpoint) {
        > .tab-pane {
          display: none;
        }
        > .active {
          display: block;
        }
      }
    }

  }
}

// Utilities
@import "bootstrap/scss/utilities/api";


//
// Custom styles
//

