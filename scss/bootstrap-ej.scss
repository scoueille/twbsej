// Override Bootstrap's Sass default variables
//
// Nearly all variables in Bootstrap are written with the `!default` flag.
// This allows you to override the default values of those variables before
// you import Bootstrap's source Sass files.
//
// Overriding the default variable values is the best way to customize your
// CSS without writing _new_ styles. For example, you can either change
// `$body-color` or write more CSS that override's Bootstrap's CSS like so:
// `body { color: red; }`.

//
// Bring in Bootstrap
//

// Toggle global options
//$enable-gradients: true;
//$enable-shadows: true;

// Include functions first
@import "bootstrap/scss/functions";

// Customize some defaults
$grid-breakpoints: (
  xs: 0,
  sm: 576px,
  md: 768px
);

$enable-negative-margins: true;

$btn-close-width: 1.2rem;

$gray-100: #F6F7F8;
$gray-200: #ECECEC;
$gray-400: #CCCCCC;
$gray-600: #707070;
$gray-900: #212121;

$border-radius: 1.5rem;
$border-radius-sm: 0.5rem;
$border-radius-lg: 2rem;
$border-radius-xl: 2.5rem;
$border-radius-xxl: 3rem;

$carousel-indicator-width: 1.6rem;
$carousel-indicator-height: 0.5rem;
$carousel-indicator-spacer: 0.3rem;
$carousel-indicator-active-bg: $gray-900;
$carousel-indicator-hit-area-height: 3rem;

$dt-font-weight: 300;

$table-th-font-weight: normal;
$table-border-width: 0.5rem;
$table-border-color: $gray-100;
$table-cell-padding-y: 1rem;
$table-cell-padding-x: 1rem;

// Required
@import "bootstrap/scss/variables";
@import "bootstrap/scss/variables-dark";
@import "bootstrap/scss/maps";

$utilities-border-colors: map-merge(
    $utilities-border-colors,
    (
      "gray-100": var(--#{$prefix}gray-100),
      "gray": var(--#{$prefix}gray-400)
    )
);
$utilities-bg-colors: map-merge(
    $utilities-bg-colors,
    (
      "gray-100": var(--#{$prefix}gray-100),
      "gray-200": var(--#{$prefix}gray-200),
      "gray": var(--#{$prefix}gray-400)
    )
);
$utilities-text-colors: map-merge(
    $utilities-text-colors,
    (
      "gray": var(--#{$prefix}gray-400),
      "yellow": var(--#{$prefix}yellow)
    )
);

$zindex-levels: map-merge(
    $zindex-levels,
    (
      10: 10
    )
);

@import "bootstrap/scss/mixins";
@import "bootstrap/scss/utilities";


@import "bootstrap/scss/root";
@import "bootstrap/scss/reboot";

dd {
  font-weight: normal;
}

@import "bootstrap/scss/type";
@import "bootstrap/scss/images";
@import "bootstrap/scss/containers";
@import "bootstrap/scss/grid";
@import "bootstrap/scss/tables";


.table {
  --#{$prefix}table-external-border-width: 1.5rem;
  --#{$prefix}table-cell-padding-y: #{$table-cell-padding-y};
  --#{$prefix}table-cell-padding-x: #{$table-cell-padding-x};
  border-width: var(--#{$prefix}table-external-border-width);
  border-style: solid;

  > :not(caption) > * > * {
    padding: var(--#{$prefix}table-cell-padding-y) var(--#{$prefix}table-cell-padding-x);
  }

  td {
    font-weight: 300;
  }

  th {
    background-color: var(--#{$prefix}-table-border-color);
  }
}

//@import "bootstrap/scss/forms";
@import "bootstrap/scss/forms/labels";
@import "bootstrap/scss/forms/form-text";
@import "bootstrap/scss/forms/form-control";
@import "bootstrap/scss/forms/form-select";
@import "bootstrap/scss/forms/form-check";
//@import "bootstrap/scss/forms/form-range";
//@import "bootstrap/scss/forms/floating-labels";
@import "bootstrap/scss/forms/input-group";
@import "bootstrap/scss/forms/validation";

@import "bootstrap/scss/buttons";
@import "bootstrap/scss/transitions";
@import "bootstrap/scss/dropdown";
@import "bootstrap/scss/button-group";
@import "bootstrap/scss/nav";
@import "bootstrap/scss/navbar"; // Requires nav
@import "bootstrap/scss/card";
@import "bootstrap/scss/accordion";
@import "bootstrap/scss/breadcrumb";
@import "bootstrap/scss/pagination";
@import "bootstrap/scss/badge";
@import "bootstrap/scss/alert";
@import "bootstrap/scss/progress";
@import "bootstrap/scss/list-group";
@import "bootstrap/scss/close";
@import "bootstrap/scss/toasts";
@import "bootstrap/scss/modal"; // Requires transitions
@import "bootstrap/scss/tooltip";
@import "bootstrap/scss/popover";
@import "bootstrap/scss/carousel";

.carousel-indicators {
  @extend .carousel-indicators;
  position: unset;
}

//@import "bootstrap/scss/spinners";
@import "bootstrap/scss/offcanvas"; // Requires transitions
@import "bootstrap/scss/placeholders";

// Helpers
@import "bootstrap/scss/helpers";

$utilities: map-remove(
  $utilities,
  "gap", "row-gap", "column-gap" "link-opacity", "text-opacity");

$utilities: map-merge(
  $utilities, (
    "cursor": (
        property: cursor,
        class: cursor,
        responsive: true,
        values: auto pointer grab,
    ),
    "rounded": map-merge(
        map-get($utilities, "rounded"),
        (
          responsive: true,
          values: map-merge(
              map-get(map-get($utilities, "rounded"), "values"),
              (1rem: 1rem),
          ),
        ),
    ),
    "rounded-top": map-merge(
        map-get($utilities, "rounded-top"),
        (
          responsive: true,
          values: map-merge(
              map-get(map-get($utilities, "rounded-top"), "values"),
              (1rem: 1rem),
          ),
        ),
    ),
    "rounded-end": map-merge(
        map-get($utilities, "rounded-end"),
        (
          responsive: true,
          values: map-merge(
              map-get(map-get($utilities, "rounded-end"), "values"),
              (1rem: 1rem),
          ),
        ),
    ),
    "rounded-bottom": map-merge(
        map-get($utilities, "rounded-bottom"),
        (
          responsive: true,
          values: map-merge(
              map-get(map-get($utilities, "rounded-bottom"), "values"),
              (1rem: 1rem),
          ),
        ),
    ),
    "rounded-start": map-merge(
        map-get($utilities, "rounded-start"),
        (
          responsive: true,
          values: map-merge(
              map-get(map-get($utilities, "rounded-start"), "values"),
              (1rem: 1rem),
          ),
        ),
    ),
    "border": map-merge(
        map-get($utilities, "border"),
        (responsive: true),
    ),
    "border-width": map-merge(
        map-get($utilities, "border-width"),
        (responsive: true),
    ),
    "position": map-merge(
        map-get($utilities, "position"),
        (responsive: true),
    ),
    "top": map-merge(
        map-get($utilities, "top"),
        (responsive: true,
          values: map-merge(
              map-get(map-get($utilities, "top"), "values"),
              (auto: auto),
          ),
        ),
    ),
    "bottom": map-merge(
        map-get($utilities, "bottom"),
        (responsive: true,
          values: map-merge(
              map-get(map-get($utilities, "bottom"), "values"),
              (auto: auto),
          ),
        ),
    ),
    "start": map-merge(
        map-get($utilities, "start"),
        (responsive: true,
          values: map-merge(
              map-get(map-get($utilities, "start"), "values"),
              (auto: auto),
          ),
        ),
    ),
    "end": map-merge(
        map-get($utilities, "end"),
        (responsive: true,
          values: map-merge(
              map-get(map-get($utilities, "end"), "values"),
              (auto: auto),
          ),
        ),
    ),
    "translate-middle": map-merge(
        map-get($utilities, "translate-middle"),
        (responsive: true),
    ),
    "overflow": map-merge(
        map-get($utilities, "overflow"),
        (responsive: true),
    ),
    "overflow-y": map-merge(
        map-get($utilities, "overflow-y"),
        (responsive: true),
    ),
    "overflow-x": map-merge(
        map-get($utilities, "overflow-x"),
        (responsive: true),
    ),
    "viewport-height": map-merge(
        map-get($utilities, "viewport-height"),
        (responsive: true),
    ),
    "height": map-merge(
        map-get($utilities, "height"),
        (responsive: true),
    ),
    "min-viewport-height": map-merge(
        map-get($utilities, "min-viewport-height"),
        (
          responsive: true,
          values: map-merge(
              map-get(map-get($utilities, "min-viewport-height"), "values"),
              (auto: auto),
          ),
        ),
    ),
    "padding-x": map-merge(
        map-get($utilities, "padding-x"),
        (
          values: map-merge(
              map-get(map-get($utilities, "padding-x"), "values"),
              (2rem: 2rem,
                4rem: 4rem,
                5rem: 5rem,
                6rem: 6rem,
                7rem: 7rem,
                8rem: 8rem,
                9rem: 9rem,
                10rem: 10rem,
                12rem: 12rem,
              ),
          ),
        ),
    ),
    "padding-start": map-merge(
        map-get($utilities, "padding-start"),
        (
          values: map-merge(
              map-get(map-get($utilities, "padding-x"), "values"),
              (2rem: 2rem,
                4rem: 4rem,
                5rem: 5rem,
                6rem: 6rem,
                7rem: 7rem,
                8rem: 8rem,
                9rem: 9rem,
                10rem: 10rem,
                12rem: 12rem,
              ),
          ),
        ),
    ),

    "padding-end": map-merge(
        map-get($utilities, "padding-end"),
        (
          values: map-merge(
              map-get(map-get($utilities, "padding-x"), "values"),
              (2rem: 2rem,
                4rem: 4rem,
                5rem: 5rem,
                6rem: 6rem,
                7rem: 7rem,
                8rem: 8rem,
                9rem: 9rem,
                10rem: 10rem,
                12rem: 12rem,
              ),
          ),
        ),
    ),
    "padding-y": map-merge(
        map-get($utilities, "padding-y"),
        (
          values: map-merge(
              map-get(map-get($utilities, "padding-y"), "values"),
              (2rem: 2rem,
                4rem: 4rem,
                5rem: 5rem,
                6rem: 6rem,
                7rem: 7rem,
                8rem: 8rem,
                9rem: 9rem,
                10rem: 10rem,
                12rem: 12rem,
              ),
          ),
        ),
    ),
    "padding-top": map-merge(
        map-get($utilities, "padding-top"),
        (
          values: map-merge(
              map-get(map-get($utilities, "padding-y"), "values"),
              (2rem: 2rem,
                4rem: 4rem,
                5rem: 5rem,
                6rem: 6rem,
                7rem: 7rem,
                8rem: 8rem,
                9rem: 9rem,
                10rem: 10rem,
                12rem: 12rem,
              ),
          ),
        ),
    ),
    "padding-bottom": map-merge(
        map-get($utilities, "padding-bottom"),
        (
          values: map-merge(
              map-get(map-get($utilities, "padding-y"), "values"),
              (2rem: 2rem,
                4rem: 4rem,
                5rem: 5rem,
                6rem: 6rem,
                7rem: 7rem,
                8rem: 8rem,
                9rem: 9rem,
                10rem: 10rem,
                12rem: 12rem,
              ),
          ),
        ),
    ),

    "negative-margin-x": map-merge(
        map-get($utilities, "negative-margin-x"),
        (
          values: map-merge(
              map-get(map-get($utilities, "negative-margin-x"), "values"),
              (2rem: 2rem,
                4rem: 4rem,
              ),
          ),
        ),
    ),
    "background-color": map-merge(
        map-get($utilities, "background-color"),
        (responsive: true),
    ),
    "color": map-merge(
        map-get($utilities, "color"),
        (responsive: true),
    ),
    "font-weight": map-merge(
        map-get($utilities, "font-weight"),
        (responsive: true),
    ),
  )
);


// Définir les valeurs de display
$hover-display-values: (
  inline,
  inline-block,
  block,
  grid,
  inline-grid,
  table,
  table-row,
  table-cell,
  flex,
  inline-flex,
  none
);

// Créez des variantes de la classe pour chaque breakpoint
@each $breakpoint in map-keys($grid-breakpoints) {
  $infix: breakpoint-infix($breakpoint, $grid-breakpoints);

  @if not ($infix == "") {
    @include media-breakpoint-up($breakpoint) {
      .fade#{$infix} {
        @include transition($transition-fade);

        &:not(.show) {
          opacity: 0;
        }

      }

      .tab-content#{$infix} {
        > .tab-pane {
          display: none;
        }

        > .active {
          display: block;
        }
      }
    }
  }
  @include media-breakpoint-up($breakpoint) {
    @each $value in $hover-display-values {
      *:hover > .hover-d#{$infix}-#{$value} {
        // Classe par défaut (sans responsive)
        display: $value !important;
      }
    }
  }
}

//
//// Générer les classes utilitaires pour `*:hover >`
//@each $value in $hover-display-values {
//  // Classe par défaut (sans responsive)
//  *:hover > .hover-d-#{$value} {
//    display: $value !important;
//  }
//
//  // Générer les variantes responsives
//  @each $breakpoint in  map-keys($grid-breakpoints) {
//    @include media-breakpoint-up($breakpoint) {
//      *:hover > .hover-d-#{$breakpoint}-#{$value} {
//        display: $value !important;
//      }
//    }
//  }
//}

// Utilities
@import "bootstrap/scss/utilities/api";


//
// Custom styles
//

